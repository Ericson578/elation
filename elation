#!/bin/bash

ACTION=$1
SUBACTION=$2
RETVAL=

export COMPONENTPATHS=$(pwd && cat config/elation.path)
export COMPONENTMEDIATYPES="css scripts images media"

framework_do() {
  CMD=$*
  echo " * $CMD"
  $CMD
}

error() {
  echo -e '\033[1m\033[31mERROR\033[0m:' $*
}
component_get_dir() {
  COMPONENTNAME=$1
  COMPONENTSUBDIR=$(echo $COMPONENTNAME |sed 's/\./\/components\//g')
  for COMPONENTPATH in $COMPONENTPATHS; do
    if [ -e $COMPONENTPATH/components/$COMPONENTSUBDIR ]; then
      echo $COMPONENTPATH/components/$COMPONENTSUBDIR
      return
    fi
  done
  echo components/$COMPONENTNAME |sed 's/\./\/components\//g'

}
component_get_classname() {
  COMPONENTNAME=$1
  echo $COMPONENTNAME |tr '.' '_'
}
component_exists() {
  COMPONENTNAME=$1

  if [ -e $(component_get_dir $COMPONENTNAME)/$(component_get_classname $COMPONENTNAME).php ]; then 
    RET=0
  else 
    RET=1
  fi

  return $RET
}
component_create() {
  export COMPONENTNAME=$1
  export COMPONENTDIR=$(component_get_dir $COMPONENTNAME)
  export COMPONENTCLASSNAME=$(echo $COMPONENTNAME |tr '.' '_')
  export COMPONENTPARTS=($(echo ${COMPONENTNAME//./ }))
  export SUBCOMPONENTNAME=$(echo ${COMPONENTPARTS[${#COMPONENTPARTS[*]}-1]})

  if component_exists $COMPONENTNAME; then
    error "Module '$COMPONENTNAME' already exists"
  else
    echo "Create $COMPONENTNAME"
    framework_do mkdir -p $COMPONENTDIR
    if [ -d $COMPONENTDIR ]; then
      framework_do mkdir $COMPONENTDIR/css
      framework_do mkdir $COMPONENTDIR/scripts
      framework_do mkdir $COMPONENTDIR/images
      framework_do mkdir $COMPONENTDIR/templates
      cat $(dirname $0)/config/component_skeleton.php |perl -ne 's/%(.*?)%/$ENV{$1}/g; print' >$COMPONENTDIR/$COMPONENTCLASSNAME.php
      echo $COMPONENTCLASSNAME > $COMPONENTDIR/templates/$SUBCOMPONENTNAME.tpl
    fi
  fi
}
component_enable() {
  COMPONENTNAME=$1
  COMPONENTDIR=$(component_get_dir $COMPONENTNAME)
  LINKPATH=$(echo $COMPONENTNAME |tr '.' '/')
  BASEDIR=$(pwd)

  if component_exists $COMPONENTNAME; then
    echo -n "Enable '${COMPONENTNAME}': "
    for TYPE in $COMPONENTMEDIATYPES; do
      if [ ! -d htdocs/$TYPE ]; then 
        mkdir htdocs/$TYPE; 
      fi
      if [ ! -L htdocs/$TYPE/$LINKPATH ]; then
        if [ -e $COMPONENTDIR/$TYPE ]; then
          echo -n "$TYPE "
          cd htdocs/$TYPE && ln -s $COMPONENTDIR/$TYPE $LINKPATH 
          cd $BASEDIR
        elif [ -e $COMPONENTDIR/htdocs/$TYPE ]; then
          echo -n "$TYPE "
          cd htdocs/$TYPE
          ln -s $COMPONENTDIR/htdocs/$TYPE $LINKPATH
          cd $BASEDIR
        fi
      fi
    done
    if [ -e components/$COMPONENTNAME/$COMPONENTNAME.model ]; then
      [ ! -e config/model ] && mkdir config/model
      cd config/model && ln -sf $BASEDIR/components/$COMPONENTNAME/$COMPONENTNAME.model . && cd $BASEDIR
      echo -n "model "
    fi
    if [ -e components/$COMPONENTNAME/model ]; then
      [ ! -e include/model ] && mkdir include/model
      cd include/model && ln -sf $BASEDIR/components/$COMPONENTNAME/model/*_class.php . && cd $BASEDIR
      echo -n "classes "
    fi
    echo "DONE"
  else
    error "Unknown component '${COMPONENTNAME}'"
  fi
}

component_disable() {
  COMPONENTNAME=$1
  COMPONENTDIR=$(component_get_dir $COMPONENTNAME)
  LINKPATH=$(echo $COMPONENTNAME |tr '.' '/')

  echo -n "Disable ${COMPONENTNAME}: "
  for TYPE in $COMPONENTMEDIATYPES; do
    [ -L htdocs/$TYPE/$LINKPATH ] && rm htdocs/$TYPE/$LINKPATH && echo -n "$TYPE "
  done
  [ -L config/model/$COMPONENTNAME.conf ] && rm config/model/$COMPONENTNAME.conf && echo -n "model "
  for F in components/$COMPONENTNAME/model/*_class.php; do
    FNAME=$(basename $F)
    [ -L "include/model/$FNAME" ] && rm include/model/$FNAME
  done
  echo DONE
}

db_init() {
  echo -n Initializing db...
  cat <<EOF |mysql
create database supercritical;
grant all privileges on supercritical.* to supercritical@'%' identified by 'h4xm3';
EOF
  echo done
}

web_init() {
  echo -n Initializing web...
  [ ! -d tmp ] && mkdir -m 1777 tmp
  [ ! -d tmp/compiled ] && mkdir -m 1777 tmp/compiled
  echo done
  
  for I in $(cat config/elation.components); do
    component_enable $I
  done
}
case "$ACTION" in
  db)
    case "$SUBACTION" in
      init)
        db_init
        ;;
    esac
    ;;
  web)
    case "$SUBACTION" in
      init)
        web_init
        ;;
    esac
    ;;
  component)
    MODNAME=$3
    case "$SUBACTION" in
      create)
        component_create $3
        ;;
      enable)
        component_enable $3
        ;;
      disable)
        component_disable $3
        ;;
    esac
    ;;
esac

