#!/bin/bash

ACTION=$1
SUBACTION=$2
RETVAL=

export COMPONENTPATHS=$(pwd && [ -f config/elation.path ] && cat config/elation.path)
export COMPONENTMEDIATYPES="css scripts images media"

expand_path() {
  echo $1 |sed "s/^~/$(echo $HOME |sed 's/\//\\\//g')/"
}
framework_do() {
  CMD=$*
  echo " * $CMD"
  $CMD
}

error() {
  echo -e '\033[1m\033[31mERROR\033[0m:' $*
}
component_get_dir() {
  COMPONENTNAME=$1
  COMPONENTSUBDIR=$(echo $COMPONENTNAME |sed 's/\./\/components\//g')
  for CPATH in $COMPONENTPATHS; do
    COMPONENTPATH=$(expand_path $CPATH)
    if [ -e $COMPONENTPATH/components/$COMPONENTSUBDIR ]; then
      echo $COMPONENTPATH/components/$COMPONENTSUBDIR
      return
    fi
  done
  echo components/$COMPONENTNAME |sed 's/\./\/components\//g'

}
component_get_classname() {
  COMPONENTNAME=$1
  echo $COMPONENTNAME |tr '.' '_'
}
component_exists() {
  COMPONENTNAME=$1

  if [ -e $(component_get_dir $COMPONENTNAME)/$(component_get_classname $COMPONENTNAME).php ]; then 
    RET=0
  else 
    RET=1
  fi

  return $RET
}
component_create() {
  export COMPONENTNAME=$1
  export COMPONENTDIR=$(component_get_dir $COMPONENTNAME)
  export COMPONENTCLASSNAME=$(echo $COMPONENTNAME |tr '.' '_')
  export COMPONENTPARTS=($(echo ${COMPONENTNAME//./ }))
  export SUBCOMPONENTNAME=$(echo ${COMPONENTPARTS[${#COMPONENTPARTS[*]}-1]})

  if component_exists $COMPONENTNAME; then
    error "Module '$COMPONENTNAME' already exists"
  else
    echo "Create $COMPONENTNAME"
    framework_do mkdir -p $COMPONENTDIR
    if [ -d $COMPONENTDIR ]; then
      framework_do mkdir $COMPONENTDIR/css
      framework_do mkdir $COMPONENTDIR/scripts
      framework_do mkdir $COMPONENTDIR/images
      framework_do mkdir $COMPONENTDIR/templates
      for CPATH in $COMPONENTPATHS; do
        COMPONENTPATH=$(expand_path $CPATH)
        if [ -e $COMPONENTPATH/config/component_skeleton.php ]; then
          cat $COMPONENTPATH/config/component_skeleton.php |perl -ne 's/%(.*?)%/$ENV{$1}/g; print' >$COMPONENTDIR/$COMPONENTCLASSNAME.php
          break
        fi
      done
      echo $COMPONENTCLASSNAME > $COMPONENTDIR/templates/$SUBCOMPONENTNAME.tpl
    fi
  fi
}
component_enable() {
  COMPONENTNAME=$1
  COMPONENTDIR=$(component_get_dir $COMPONENTNAME)
  LINKPATH=$(echo $COMPONENTNAME |tr '.' '/')
  BASEDIR=$(pwd)

  if component_exists $COMPONENTNAME; then
    echo -n "Enable '${COMPONENTNAME}': "
    for TYPE in $COMPONENTMEDIATYPES; do
      if [ ! -d htdocs/$TYPE ]; then 
        mkdir htdocs/$TYPE; 
      fi
      if [ -L htdocs/$TYPE/$LINKPATH ]; then
        rm htdocs/$TYPE/$LINKPATH
      fi
      if [ -e $COMPONENTDIR/$TYPE ]; then
        echo -n "$TYPE "
        cd htdocs/$TYPE && ln -sf $COMPONENTDIR/$TYPE $LINKPATH 
        cd $BASEDIR
      elif [ -e $COMPONENTDIR/htdocs/$TYPE ]; then
        echo -n "$TYPE "
        cd htdocs/$TYPE
        ln -sf $COMPONENTDIR/htdocs/$TYPE $LINKPATH
        cd $BASEDIR
      fi
    done
    if [ -e components/$COMPONENTNAME/$COMPONENTNAME.model ]; then
      [ ! -e config/model ] && mkdir config/model
      cd config/model && ln -sf $BASEDIR/components/$COMPONENTNAME/$COMPONENTNAME.model . && cd $BASEDIR
      echo -n "model "
    fi
    if [ -e components/$COMPONENTNAME/model ]; then
      [ ! -e include/model ] && mkdir include/model
      cd include/model && ln -sf $BASEDIR/components/$COMPONENTNAME/model/*_class.php . && cd $BASEDIR
      echo -n "classes "
    fi
    echo "DONE"
  else
    error "Unknown component '${COMPONENTNAME}'"
  fi
}

component_disable() {
  COMPONENTNAME=$1
  COMPONENTDIR=$(component_get_dir $COMPONENTNAME)
  LINKPATH=$(echo $COMPONENTNAME |tr '.' '/')

  echo -n "Disable ${COMPONENTNAME}: "
  for TYPE in $COMPONENTMEDIATYPES; do
    [ -L htdocs/$TYPE/$LINKPATH ] && rm htdocs/$TYPE/$LINKPATH && echo -n "$TYPE "
  done
  [ -L config/model/$COMPONENTNAME.conf ] && rm config/model/$COMPONENTNAME.conf && echo -n "model "
  for F in components/$COMPONENTNAME/model/*_class.php; do
    FNAME=$(basename $F)
    [ -L "include/model/$FNAME" ] && rm include/model/$FNAME
  done
  echo DONE
}

db_init() {
  echo -n Initializing db...
  cat <<EOF |mysql
create database supercritical;
grant all privileges on supercritical.* to supercritical@'%' identified by 'h4xm3';
EOF
  echo done
}

web_init() {
  echo -n Initializing web...
  [ ! -d tmp ] && mkdir -m 2777 tmp
  echo done
  
  for I in $(cat config/elation.components); do
    component_enable $I
  done
}

system_package() {
  VERSION=$1
  INSTALLDIR=debian/package/elation-$VERSION
  
  if [ -z "$VERSION" ]; then
    echo "Usage: $0 system package <version>"
  else
    echo Installing in $INSTALLDIR
    [ ! -d "$INSTALLDIR/DEBIAN" ] && mkdir -p "$INSTALLDIR/DEBIAN" 
    [ ! -d "$INSTALLDIR/etc/elation" ] && mkdir -p "$INSTALLDIR/etc/elation" 
    [ ! -d "$INSTALLDIR/usr/bin" ] && mkdir -p "$INSTALLDIR/usr/bin" 
    [ ! -d "$INSTALLDIR/usr/share/elation" ] && mkdir -p "$INSTALLDIR/usr/share/elation" 
    [ ! -d "$INSTALLDIR/var/lib/elation" ] && mkdir -p "$INSTALLDIR/var/lib/elation" 

    cp elation $INSTALLDIR/usr/bin
    cp -r components config htdocs include lib README templates tests util $INSTALLDIR/usr/share/elation
    cp -r config/* $INSTALLDIR/etc/elation
    CONTROLFILE="echo \"$(cat debian/control)\""
    eval "$CONTROLFILE" |tee $INSTALLDIR/DEBIAN/control
    #echo $(cat debian/control) |tee $INSTALLDIR/DEBIAN/control

    cd debian/package/
    dpkg-deb --build elation-$VERSION
    if [ -e elation-$VERSION.deb ]; then
      mv elation-$VERSION.deb ../..
      echo done
    else
      error "Failed to create file: elation-$VERSION.deb"
    fi
    cd ../..
    if [ -d $INSTALLDIR ]; then
      echo .
      #rm -r $INSTALLDIR
    fi
  fi
}

case "$ACTION" in
  system)
    case "$SUBACTION" in
      package)
        system_package $3
        ;;
      *)
        echo "Usage: $0 $ACTION [package]"
        ;;
    esac
    ;;
  db)
    case "$SUBACTION" in
      init)
        db_init
        ;;
      *)
        echo "Usage: $0 $ACTION [init]"
        ;;
    esac
    ;;
  web)
    case "$SUBACTION" in
      init)
        web_init
        ;;
      *)
        echo "Usage: $0 $ACTION [init]"
        ;;
    esac
    ;;
  component)
    MODNAME=$3
    case "$SUBACTION" in
      create)
        component_create $3
        ;;
      enable)
        component_enable $3
        ;;
      disable)
        component_disable $3
        ;;
      *)
        echo "Usage: $0 $ACTION [create|enable|disable]"
        ;;
    esac
    ;;
  *)
    echo "Usage: $0 [system|db|web|component] help"
    ;;
esac

